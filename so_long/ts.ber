1111111
10P0C11
1000E11
1111111
1111111
		// j = 0;
		// while (creat.line[j] && creat.line[j] != '\n')
		// {
		// 	creat.the_maze[i][j] = creat.line[j];
		// 	j++;
		// }
		// creat.the_maze[i][j] = '\0';
        //in map_structure.c



			int	i;
	int	j;

	i = 1;
	while (the_maze[i])
	{
		j = 0;
		while (the_maze[i][j])
		{
			set_it_and_exit(the_maze[i + 1][j], the_maze[i][j], rm_clc);
			if (((the_maze[i][j] == '0') || (the_maze[i][j] == 'C'))
				&& (the_maze[i + 1][j] == 'P'))
			{
				if (the_maze[i][j] == 'C')
					*rm_clc = *rm_clc - 1;
				the_maze[i][j] = 'P';
				the_maze[i + 1][j] = '0';
				*counter = *counter + 1;
				return (1);
			}
			j++;
		}
		i++;
	}
	return (0);
	// in move up



		//system("P=$(pgrep afplay /Users/fchanane/Desktop/so_long/music/theme.mp3) && kill -9 $P");
		//system("P=$(pgrep afplay /Users/fchanane/Desktop/so_long/music/theme.mp3) && kill -9 $P");
		//system("afplay ./music/theme.mp3 &");
		//in so_long.c



//remove NULL from creat.the_maze[i]



compiling : gcc -lmlx -framework OpenGL -framework AppKit so_long.c libft.c libft2.c errors.c errors_msg.c get_next_line.c get_next_line_utils.c map_structure.c parser.c parsing_error_msg.c moves.c draw.c -fsanitize=address -g

in map_structure :
		//creat.the_maze = malloc((creat.columns + 1) * (lines + 1));





// int	check_map(char *file)
// {
// 	t_checker	checker;
// 	int			lines;

// 	checker.fd = open(file, O_RDONLY);
// 	error_fd(checker.fd);
// 	checker.read = get_next_line(checker.fd);
// 	error_empty(checker.read, checker.fd);
// 	checker.size = ft_strlen(checker.read);
// 	if (endline_in(checker.read))
// 		checker.size--;
// 	lines = 0;
// 	while (checker.read)
// 	{
// 		checker.line = ft_strdup(checker.read);
// 		lines++;
// 		checker.size_line = ft_strlen(checker.line);
// 		if (endline_in(checker.line))
// 			checker.size_line--;
// 		error_equal(checker.fd, checker.size, checker.size_line);
// 		free(checker.line);
// 		checker.read = get_next_line(checker.fd);
// 	}
// 	close(checker.fd);
// 	error_enough(checker.size, lines);
// 	return (lines);
// }